<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cyberpay.crypto.mapper.CryptoSupportNetworkMapper">
  <resultMap id="BaseResultMap" type="org.cyberpay.crypto.model.CryptoSupportNetwork">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="crypto_symbol" jdbcType="VARCHAR" property="cryptoSymbol" />
    <result column="crypto_type" jdbcType="VARCHAR" property="cryptoType" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="token_assets_id" jdbcType="VARCHAR" property="tokenAssetsId" />
    <result column="contract_address" jdbcType="VARCHAR" property="contractAddress" />
    <result column="coin_decimal_unit" jdbcType="BIGINT" property="coinDecimalUnit" />
    <result column="coin_decimal" jdbcType="BIGINT" property="coinDecimal" />
    <result column="network_code" jdbcType="VARCHAR" property="networkCode" />
    <result column="network_name" jdbcType="VARCHAR" property="networkName" />
    <result column="network_type" jdbcType="VARCHAR" property="networkType" />
    <result column="is_available" jdbcType="CHAR" property="isAvailable" />
    <result column="extend" jdbcType="VARCHAR" property="extend" />
    <result column="extend2" jdbcType="VARCHAR" property="extend2" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>

  <resultMap id="SupportNetworkResultMap" type="org.cyberpay.crypto.dto.SupportNetworkDto">
    <result column="network_code" jdbcType="VARCHAR" property="networkCode" />
    <result column="network_name" jdbcType="VARCHAR" property="networkName" />
    <result column="network_type" jdbcType="VARCHAR" property="networkType" />
    <result column="is_available" jdbcType="CHAR" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, crypto_symbol, crypto_type, node_name, token_assets_id, contract_address, coin_decimal_unit, 
    coin_decimal, network_code, network_name, network_type, is_available, extend, extend2, 
    create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from crypto_support_network
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from crypto_support_network
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.cyberpay.crypto.model.CryptoSupportNetwork">
    insert into crypto_support_network (id, crypto_symbol, crypto_type, 
      node_name, token_assets_id, contract_address, 
      coin_decimal_unit, coin_decimal, network_code, 
      network_name, network_type, is_available, 
      extend, extend2, create_time, 
      update_time)
    values (#{id,jdbcType=BIGINT}, #{cryptoSymbol,jdbcType=VARCHAR}, #{cryptoType,jdbcType=VARCHAR}, 
      #{nodeName,jdbcType=VARCHAR}, #{tokenAssetsId,jdbcType=VARCHAR}, #{contractAddress,jdbcType=VARCHAR}, 
      #{coinDecimalUnit,jdbcType=BIGINT}, #{coinDecimal,jdbcType=BIGINT}, #{networkCode,jdbcType=VARCHAR}, 
      #{networkName,jdbcType=VARCHAR}, #{networkType,jdbcType=VARCHAR}, #{isAvailable,jdbcType=CHAR}, 
      #{extend,jdbcType=VARCHAR}, #{extend2,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.cyberpay.crypto.model.CryptoSupportNetwork">
    insert into crypto_support_network
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="cryptoSymbol != null">
        crypto_symbol,
      </if>
      <if test="cryptoType != null">
        crypto_type,
      </if>
      <if test="nodeName != null">
        node_name,
      </if>
      <if test="tokenAssetsId != null">
        token_assets_id,
      </if>
      <if test="contractAddress != null">
        contract_address,
      </if>
      <if test="coinDecimalUnit != null">
        coin_decimal_unit,
      </if>
      <if test="coinDecimal != null">
        coin_decimal,
      </if>
      <if test="networkCode != null">
        network_code,
      </if>
      <if test="networkName != null">
        network_name,
      </if>
      <if test="networkType != null">
        network_type,
      </if>
      <if test="isAvailable != null">
        is_available,
      </if>
      <if test="extend != null">
        extend,
      </if>
      <if test="extend2 != null">
        extend2,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="cryptoSymbol != null">
        #{cryptoSymbol,jdbcType=VARCHAR},
      </if>
      <if test="cryptoType != null">
        #{cryptoType,jdbcType=VARCHAR},
      </if>
      <if test="nodeName != null">
        #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="tokenAssetsId != null">
        #{tokenAssetsId,jdbcType=VARCHAR},
      </if>
      <if test="contractAddress != null">
        #{contractAddress,jdbcType=VARCHAR},
      </if>
      <if test="coinDecimalUnit != null">
        #{coinDecimalUnit,jdbcType=BIGINT},
      </if>
      <if test="coinDecimal != null">
        #{coinDecimal,jdbcType=BIGINT},
      </if>
      <if test="networkCode != null">
        #{networkCode,jdbcType=VARCHAR},
      </if>
      <if test="networkName != null">
        #{networkName,jdbcType=VARCHAR},
      </if>
      <if test="networkType != null">
        #{networkType,jdbcType=VARCHAR},
      </if>
      <if test="isAvailable != null">
        #{isAvailable,jdbcType=CHAR},
      </if>
      <if test="extend != null">
        #{extend,jdbcType=VARCHAR},
      </if>
      <if test="extend2 != null">
        #{extend2,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.cyberpay.crypto.model.CryptoSupportNetwork">
    update crypto_support_network
    <set>
      <if test="cryptoSymbol != null">
        crypto_symbol = #{cryptoSymbol,jdbcType=VARCHAR},
      </if>
      <if test="cryptoType != null">
        crypto_type = #{cryptoType,jdbcType=VARCHAR},
      </if>
      <if test="nodeName != null">
        node_name = #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="tokenAssetsId != null">
        token_assets_id = #{tokenAssetsId,jdbcType=VARCHAR},
      </if>
      <if test="contractAddress != null">
        contract_address = #{contractAddress,jdbcType=VARCHAR},
      </if>
      <if test="coinDecimalUnit != null">
        coin_decimal_unit = #{coinDecimalUnit,jdbcType=BIGINT},
      </if>
      <if test="coinDecimal != null">
        coin_decimal = #{coinDecimal,jdbcType=BIGINT},
      </if>
      <if test="networkCode != null">
        network_code = #{networkCode,jdbcType=VARCHAR},
      </if>
      <if test="networkName != null">
        network_name = #{networkName,jdbcType=VARCHAR},
      </if>
      <if test="networkType != null">
        network_type = #{networkType,jdbcType=VARCHAR},
      </if>
      <if test="isAvailable != null">
        is_available = #{isAvailable,jdbcType=CHAR},
      </if>
      <if test="extend != null">
        extend = #{extend,jdbcType=VARCHAR},
      </if>
      <if test="extend2 != null">
        extend2 = #{extend2,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.cyberpay.crypto.model.CryptoSupportNetwork">
    update crypto_support_network
    set crypto_symbol = #{cryptoSymbol,jdbcType=VARCHAR},
      crypto_type = #{cryptoType,jdbcType=VARCHAR},
      node_name = #{nodeName,jdbcType=VARCHAR},
      token_assets_id = #{tokenAssetsId,jdbcType=VARCHAR},
      contract_address = #{contractAddress,jdbcType=VARCHAR},
      coin_decimal_unit = #{coinDecimalUnit,jdbcType=BIGINT},
      coin_decimal = #{coinDecimal,jdbcType=BIGINT},
      network_code = #{networkCode,jdbcType=VARCHAR},
      network_name = #{networkName,jdbcType=VARCHAR},
      network_type = #{networkType,jdbcType=VARCHAR},
      is_available = #{isAvailable,jdbcType=CHAR},
      extend = #{extend,jdbcType=VARCHAR},
      extend2 = #{extend2,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="queryCryptoSupportNetwork" parameterType="java.lang.String" resultMap="SupportNetworkResultMap">
    select network_code,network_name,network_type, is_available from crypto_support_network where crypto_symbol = #{symbol,jdbcType=VARCHAR}
  </select>

  <select id="queryAvailableCryptoSupportNetwork" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List"/>
    from crypto_support_network
    where crypto_symbol = #{symbol,jdbcType=VARCHAR}
    AND network_code = #{networkCode,jdbcType=VARCHAR}
    AND is_available = '1'
  </select>

  <select id="findCryptoSupportNetwork" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List"/>
    from crypto_support_network
    <where>
      <if test="null != symbol and '' != symbol">
        AND crypto_symbol = #{symbol,jdbcType=VARCHAR}
      </if>
      <if test="null != networkCode and '' != networkCode">
        AND network_code = #{networkCode,jdbcType=VARCHAR}
      </if>
      <if test="null != contract and '' != contract">
        AND contract_address = #{contract,jdbcType=VARCHAR}
      </if>
    </where>
  </select>
</mapper>